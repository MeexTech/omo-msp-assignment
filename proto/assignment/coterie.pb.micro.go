// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/assignment/coterie.proto

package assignment

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CoterieService service

type CoterieService interface {
	AddOne(ctx context.Context, in *ReqCoterieAdd, opts ...client.CallOption) (*ReplyCoterieInfo, error)
	UpdateBase(ctx context.Context, in *ReqCoterieUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCoterieInfo, error)
	Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCoterieList, error)
	GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyCoterieList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateStatus(ctx context.Context, in *RequestIntFlag, opts ...client.CallOption) (*ReplyInfo, error)
	AppendMember(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCoterieMembers, error)
	SubtractMember(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCoterieMembers, error)
}

type coterieService struct {
	c    client.Client
	name string
}

func NewCoterieService(name string, c client.Client) CoterieService {
	return &coterieService{
		c:    c,
		name: name,
	}
}

func (c *coterieService) AddOne(ctx context.Context, in *ReqCoterieAdd, opts ...client.CallOption) (*ReplyCoterieInfo, error) {
	req := c.c.NewRequest(c.name, "CoterieService.AddOne", in)
	out := new(ReplyCoterieInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coterieService) UpdateBase(ctx context.Context, in *ReqCoterieUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CoterieService.UpdateBase", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coterieService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CoterieService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coterieService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCoterieInfo, error) {
	req := c.c.NewRequest(c.name, "CoterieService.GetOne", in)
	out := new(ReplyCoterieInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coterieService) Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCoterieList, error) {
	req := c.c.NewRequest(c.name, "CoterieService.Search", in)
	out := new(ReplyCoterieList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coterieService) GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyCoterieList, error) {
	req := c.c.NewRequest(c.name, "CoterieService.GetListByFilter", in)
	out := new(ReplyCoterieList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coterieService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "CoterieService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coterieService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CoterieService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coterieService) UpdateStatus(ctx context.Context, in *RequestIntFlag, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CoterieService.UpdateStatus", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coterieService) AppendMember(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCoterieMembers, error) {
	req := c.c.NewRequest(c.name, "CoterieService.AppendMember", in)
	out := new(ReplyCoterieMembers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coterieService) SubtractMember(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCoterieMembers, error) {
	req := c.c.NewRequest(c.name, "CoterieService.SubtractMember", in)
	out := new(ReplyCoterieMembers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CoterieService service

type CoterieServiceHandler interface {
	AddOne(context.Context, *ReqCoterieAdd, *ReplyCoterieInfo) error
	UpdateBase(context.Context, *ReqCoterieUpdate, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyCoterieInfo) error
	Search(context.Context, *RequestInfo, *ReplyCoterieList) error
	GetListByFilter(context.Context, *RequestFilter, *ReplyCoterieList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
	UpdateStatus(context.Context, *RequestIntFlag, *ReplyInfo) error
	AppendMember(context.Context, *RequestInfo, *ReplyCoterieMembers) error
	SubtractMember(context.Context, *RequestInfo, *ReplyCoterieMembers) error
}

func RegisterCoterieServiceHandler(s server.Server, hdlr CoterieServiceHandler, opts ...server.HandlerOption) error {
	type coterieService interface {
		AddOne(ctx context.Context, in *ReqCoterieAdd, out *ReplyCoterieInfo) error
		UpdateBase(ctx context.Context, in *ReqCoterieUpdate, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyCoterieInfo) error
		Search(ctx context.Context, in *RequestInfo, out *ReplyCoterieList) error
		GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyCoterieList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		UpdateStatus(ctx context.Context, in *RequestIntFlag, out *ReplyInfo) error
		AppendMember(ctx context.Context, in *RequestInfo, out *ReplyCoterieMembers) error
		SubtractMember(ctx context.Context, in *RequestInfo, out *ReplyCoterieMembers) error
	}
	type CoterieService struct {
		coterieService
	}
	h := &coterieServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CoterieService{h}, opts...))
}

type coterieServiceHandler struct {
	CoterieServiceHandler
}

func (h *coterieServiceHandler) AddOne(ctx context.Context, in *ReqCoterieAdd, out *ReplyCoterieInfo) error {
	return h.CoterieServiceHandler.AddOne(ctx, in, out)
}

func (h *coterieServiceHandler) UpdateBase(ctx context.Context, in *ReqCoterieUpdate, out *ReplyInfo) error {
	return h.CoterieServiceHandler.UpdateBase(ctx, in, out)
}

func (h *coterieServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.CoterieServiceHandler.RemoveOne(ctx, in, out)
}

func (h *coterieServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyCoterieInfo) error {
	return h.CoterieServiceHandler.GetOne(ctx, in, out)
}

func (h *coterieServiceHandler) Search(ctx context.Context, in *RequestInfo, out *ReplyCoterieList) error {
	return h.CoterieServiceHandler.Search(ctx, in, out)
}

func (h *coterieServiceHandler) GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyCoterieList) error {
	return h.CoterieServiceHandler.GetListByFilter(ctx, in, out)
}

func (h *coterieServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.CoterieServiceHandler.GetStatistic(ctx, in, out)
}

func (h *coterieServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.CoterieServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *coterieServiceHandler) UpdateStatus(ctx context.Context, in *RequestIntFlag, out *ReplyInfo) error {
	return h.CoterieServiceHandler.UpdateStatus(ctx, in, out)
}

func (h *coterieServiceHandler) AppendMember(ctx context.Context, in *RequestInfo, out *ReplyCoterieMembers) error {
	return h.CoterieServiceHandler.AppendMember(ctx, in, out)
}

func (h *coterieServiceHandler) SubtractMember(ctx context.Context, in *RequestInfo, out *ReplyCoterieMembers) error {
	return h.CoterieServiceHandler.SubtractMember(ctx, in, out)
}
